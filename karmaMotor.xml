<module>
    <!-- module's name should match its executable file's name. -->
    <name>karmaMotor</name>
    <description>Template module</description>
    <version>1.0</version>

    <!-- <arguments> can have multiple <param> tags-->
    <arguments>
        <param desc="first parameter"> param1 </param>
    </arguments>

    <!-- <authors> can have multiple <author> tags. -->
    <authors>
        <author email=""> author1 </author>
    </authors>

     <!-- <data> can have multiple <input> or <output> tags. -->
     <data>
        <!-- input data if available-->
        <input>
            <type>rpc</type>
            <port carrier="tcp">/karmaMotor/rpc</port>
            <required>no</required>
            <priority>no</priority>
            <description></description>
        </input>

        <input>
            <type>Vector</type>
            <port carrier="tcp">/karmaMotor/vision:i</port>
            <required>no</required>
            <priority>no</priority>
            <description></description>
        </input>
        <!-- output datas if available -->
        <output>
            <type>rpc</type>
            <port carrier="tcp">/karmaMotor/finder:rpc</port>
            <description></description>
        </output>
    </data>

    <!-- physical and logical resource dependencies can be introduced in this
         section. Dependencies must follow resource conceptional models. Currently
         available resource models are 'memory', 'processor', 'storage', 'network',
         'yarp_port', 'platform' and 'gpu'. All resource dependencies should be introduced
         inside <computer></computer> tags. While resources described inside <computer>
         tags represent conjunctional dependency, resources from different <computer>
         tags can be seen as disjunctions. Meaning that If a module depend on either
         resource R1 or R2 they can be introduced inside two different <computer> tags.
         Resource dependencies should be introduced if they are really required. For
         example, if module's performance drops significantly in case of memory swapping,
         a memory resource dependency can be introduced with the required memory space. -->
    <dependencies>
        <computer>
        </computer>
    </dependencies>

    <!-- specific libraries or header files which are used for development -->
    <development>
        <header></header>
        <library></library>
    </development>

</module>

